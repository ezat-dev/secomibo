<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="work">

	<!-- 작업지시 조회 -->
	<select id="getWorkInstructionList" parameterType="work" resultType="work">
	SELECT * 
	FROM (
		SELECT
		A.ord_date,	--입고일
		A.ord_code,	--수주NO
		B.ilbo_lot,	--일보로트
		B.ilbo_no,	--일보순번
		CASE WHEN B.ilbo_gubn = 'J' THEN '준비'
			 WHEN B.ilbo_gubn = 'A' THEN '열처리'
			 WHEN B.ilbo_gubn = 'R' THEN '템퍼링'
		END AS ilbo_gubn,--일보구분(J:준비, A:열처리, R:템퍼링)
		CASE WHEN B.ilbo_gubn = 'J' THEN 1
			 WHEN B.ilbo_gubn = 'A' THEN 2
			 WHEN B.ilbo_gubn = 'R' THEN 3
		END AS ilbo_gubn_idx,--일보구분(J:준비, A:열처리, R:템퍼링)
		B.ilbo_strt,--일보시작일
		B.ilbo_end,	--일보종료일
		A.ord_su,	--입고수량
		B.ilbo_su,	--일보수량
		E.fac_name,	--설비명
		C.prod_name,--제품명
		C.prod_no,	--제품품번
		C.prod_gyu,	--제품규격
		C.prod_jai,	--제품재질
		D.corp_name	--거래처명
		FROM ordert A 
		LEFT OUTER JOIN
			workilbo B	
		ON A.ord_code = B.ord_code
		LEFT OUTER JOIN
			product C
		ON A.prod_code = C.prod_code
		LEFT OUTER JOIN
			corp D
		ON C.corp_code = D.corp_code
		LEFT OUTER JOIN
			facility E
		ON B.fac_code = E.fac_code
		WHERE 1=1
		AND B.ilbo_strt >= CONCAT(#{sdate},' 00:00:00')
		AND B.ilbo_strt <![CDATA[<=]]> CONCAT(#{edate}, ' 23:59:59')
	) AA
	ORDER BY ilbo_lot DESC, ilbo_gubn_idx
	</select>

	<!-- 작업지시 - 준비작업 스캔한 바코드의 입고정보 조회 -->
	<select id="getWorkJBarcode" parameterType="work" resultType="work">
		SELECT TOP 1 A.ord_code, A.ord_date, A.ord_su, (A.ord_su * A.ord_danj) AS ord_danj,
			 C.corp_name, B.prod_name, B.prod_no, B.prod_danj,
			 CONCAT(B.prod_pg, ' ', B.prod_pg1, ' ~ ') AS prod_pg,
			 CONCAT(B.prod_gd3,' ',B.prod_gd4, ' ~ ', B.prod_gd5) AS prod_gd,
			 E.wstd_t32,
			 E.wstd_t33,
			 E.wstd_t41,
			 E.wstd_t42,
			 E.wstd_t87,
			 E.wstd_t43,
			 E.wstd_t44,
			 E.wstd_t51,
			 E.wstd_t52,
			 E.wstd_t53,
			 E.wstd_t54,
			 E.wstd_t30,
			 F.ilbo_strt,
			 F.ilbo_end
--			 ,G.user_name
		FROM ordert A
		INNER JOIN
			product B
		ON A.prod_code = B.prod_code
		INNER JOIN
			corp C
		ON B.corp_code = C.corp_code
		INNER JOIN
			techIN D
		ON B.tech_no = D.tech_no
		INNER JOIN
			workstd E
		ON B.prod_code = E.prod_code
		LEFT OUTER JOIN
			workilbo F
		ON A.ord_code = F.ord_code
--		INNER JOIN
--			usert G
--		ON F.user_code = G.user_code		
		WHERE A.ord_code = #{barcode};		
	</select>

	<select id="setWorkJSaveChk" parameterType="work" resultType="work">
		SELECT *
		FROM workilbo
		WHERE 1=1 
		AND ilbo_gubn = 'J'
		AND ord_code = #{ord_code}
	</select>

	<insert id="setWorkJSave" parameterType="work">
		
			INSERT INTO workilbo (ilbo_code, ilbo_no, ord_code, ilbo_gubn, ilbo_su, ilbo_jung, ilbo_strt, ilbo_end, user_code)
			VALUES
								 (				  
								 (SELECT ISNULL(MAX(ILBO_CODE), 0)+1
									FROM WORKILBO
								  ),
					(SELECT CASE WHEN MAX(ILBO_NO) IS NULL 
						   THEN 0 
						   ELSE ISNULL(MAX(ILBO_NO),0)+1 END 
					FROM WORKILBO WHERE ord_code = #{ord_code}
								  ),								  
								 #{ord_code}, 'J', #{ilbo_su}, #{ilbo_jung}, #{ilbo_strt}, #{ilbo_end}, #{user_code})
<!-- 		
	<if test='queryGb.equals("I")'>
	</if>
		<if test='queryGb.equals("U")'>
			UPDATE workilbo SET 
				ilbo_su = #{ilbo_su}, ilbo_jung = #{ilbo_jung}
			WHERE ord_code = #{ord_code} AND ilbo_gubn = 'J' AND ilbo_no = #{ilbo_no}
		</if> -->
	</insert>

	<!-- 작업지시 - 작업지시대기 조회(팝업) -->
	<select id="getWorkWaitList" parameterType="work"
		resultType="work">
		SELECT LEFT(CONVERT(nvarchar, dbo.ORDERT.ORD_DATE, 120), 10) as
		ORD_DATE, dbo.CORP.CORP_NAME, dbo.PRODUCT.PROD_NAME,
		dbo.PRODUCT.PROD_NO, dbo.PRODUCT.PROD_GYU, dbo.PRODUCT.PROD_JAI,
		dbo.TECHIN.TECH_TE, dbo.PRODUCT.PROD_PG, dbo.PRODUCT.PROD_PG1,
		dbo.PRODUCT.PROD_PG2, dbo.ORDERT.ORD_AMNT, dbo.ORDERT.ORD_SU,
		dbo.ORDERT.ORD_BIGO, dbo.ORDERT.ORD_SU -
		ISNULL(SUM(dbo.WORKILBO.ILBO_SU), 0) AS Work_Su, dbo.ORDERT.ORD_AMNT -
		ISNULL(SUM(dbo.WORKILBO.ILBO_JUNG), 0) AS Work_Jung,
		dbo.ORDERT.ORD_CODE, dbo.TECHIN.TECH_HT,
		dbo.ORDERT.PROD_CODE,dbo.WORKSTD.WSTD_N06,dbo.WORKSTD.WSTD_N07,dbo.WORKSTD.WSTD_N11,
		dbo.WORKSTD.WSTD_N12,dbo.WORKSTD.WSTD_READY,
		dbo.WORKSTD.WSTD_WORKTIME, CORP.CORP_NAME,
		CONCAT(dbo.PRODUCT.PROD_GD1,' ', CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_GD2,'') = '' THEN '' ELSE
		CONCAT(dbo.PRODUCT.PROD_GD2,'기준 ') END ,dbo.PRODUCT.PROD_GD3,' ', CASE
		WHEN ISNULL(dbo.PRODUCT.PROD_GD4,'') = '' THEN CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_GD5,'') = '' THEN '' WHEN
		ISNULL(dbo.PRODUCT.PROD_GD5,'')!='' THEN
		CONCAT(dbo.PRODUCT.PROD_GD5,'이하') END WHEN
		ISNULL(dbo.PRODUCT.PROD_GD4,'') !='' THEN CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_GD5,'')='' THEN
		CONCAT(dbo.PRODUCT.PROD_GD4,'이상') WHEN
		ISNULL(dbo.PRODUCT.PROD_GD5,'')!='' THEN
		CONCAT(dbo.PRODUCT.PROD_GD4,'~',dbo.PRODUCT.PROD_GD5) END END) AS
		Prod_Cd, CONCAT(dbo.PRODUCT.PROD_PG,' ', CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_PG1,'') = '' THEN CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_PG2,'') = '' THEN '' WHEN
		ISNULL(dbo.PRODUCT.PROD_PG2,'')!='' THEN
		CONCAT(dbo.PRODUCT.PROD_PG2,'이하') END WHEN
		ISNULL(dbo.PRODUCT.PROD_PG1,'') !='' THEN CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_PG2,'')='' THEN
		CONCAT(dbo.PRODUCT.PROD_PG1,'이상') WHEN
		ISNULL(dbo.PRODUCT.PROD_PG2,'')!='' THEN
		CONCAT(dbo.PRODUCT.PROD_PG1,'~',PRODUCT.PROD_PG2) END END) AS Prod_PG,
		CONCAT(dbo.PRODUCT.PROD_SG,' ', CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_SG1,'') = '' THEN CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_SG2,'') = '' THEN '' WHEN
		ISNULL(dbo.PRODUCT.PROD_SG2,'')!='' THEN
		CONCAT(dbo.PRODUCT.PROD_SG2,'이하') END WHEN
		ISNULL(dbo.PRODUCT.PROD_SG1,'') !='' THEN CASE WHEN
		ISNULL(dbo.PRODUCT.PROD_SG2,'')='' THEN
		CONCAT(dbo.PRODUCT.PROD_SG1,'이상') WHEN
		ISNULL(dbo.PRODUCT.PROD_SG2,'')!='' THEN
		CONCAT(dbo.PRODUCT.PROD_SG1,'~'+PRODUCT.PROD_SG2) END END) AS Prod_SG
		FROM dbo.ORDERT WITH(NOLOCK) 
		INNER JOIN dbo.PRODUCT WITH(NOLOCK) 
			ON dbo.ORDERT.PROD_CODE = dbo.PRODUCT.PROD_CODE 
		INNER JOIN dbo.CORP WITH(NOLOCK) 
			ON dbo.PRODUCT.CORP_CODE = dbo.CORP.CORP_CODE 
		INNER JOIN dbo.TECHIN WITH(NOLOCK) 
			ON dbo.PRODUCT.TECH_NO = dbo.TECHIN.TECH_NO
		LEFT MERGE JOIN dbo.WORKILBO WITH(NOLOCK) 
			ON dbo.ORDERT.ORD_CODE = dbo.WORKILBO.ORD_CODE 
		LEFT OUTER JOIN dbo.WORKSTD WITH(NOLOCK) 
			ON WORKSTD.PROD_CODE = PRODUCT.PROD_CODE 
		WHERE ORD_DATE BETWEEN
		#{sdate}+' 00:00:00' AND #{edate}+' 23:59:59'
		<!-- <where> <if test="ordDateS != null"> <if test="ordDateS != ''"> </if> 
			</if> <if test="corpName != null"> AND CORP_NAME like + '%' + #{corpName} 
			+ '%' </if> <if test="prodName != null"> AND PROD_NAME like + '%' + #{prodName} 
			+ '%' </if> <if test="prodNo != null"> AND PROD_NO like + '%' + #{prodNo} 
			+ '%' </if> <if test="prodGyu != null"> AND PROD_GYU like + '%' + #{prodGyu} 
			+ '%' </if> <if test="prodJal != null"> AND PROD_JAI like + '%' + #{prodJal} 
			+ '%' </if> </where> -->
		GROUP BY dbo.ORDERT.ORD_DATE, dbo.CORP.CORP_NAME,
		dbo.PRODUCT.PROD_NAME, dbo.PRODUCT.PROD_NO, dbo.PRODUCT.PROD_GYU,
		dbo.PRODUCT.PROD_JAI, dbo.TECHIN.TECH_TE, dbo.PRODUCT.PROD_PG,
		dbo.PRODUCT.PROD_PG1, dbo.PRODUCT.PROD_PG2, dbo.ORDERT.ORD_AMNT,
		dbo.ORDERT.ORD_SU, dbo.ORDERT.ORD_BIGO, dbo.ORDERT.ORD_CODE,
		dbo.TECHIN.TECH_HT,
		dbo.ORDERT.PROD_CODE,dbo.WORKSTD.WSTD_N06,dbo.WORKSTD.WSTD_N07,dbo.WORKSTD.WSTD_N11,dbo.WORKSTD.WSTD_N12,dbo.WORKSTD.WSTD_READY,
		dbo.WORKSTD.WSTD_WORKTIME , dbo.PRODUCT.PROD_GD1,
		dbo.PRODUCT.PROD_GD2, dbo.PRODUCT.PROD_GD3, dbo.PRODUCT.PROD_GD4,
		dbo.PRODUCT.PROD_GD5,
		dbo.PRODUCT.PROD_PG,dbo.PRODUCT.PROD_PG1,dbo.PRODUCT.PROD_PG2,
		dbo.PRODUCT.PROD_SG,dbo.PRODUCT.PROD_SG1,dbo.PRODUCT.PROD_SG2 HAVING
		(dbo.ORDERT.ORD_AMNT - ISNULL(SUM(dbo.WORKILBO.ILBO_JUNG), 0) > 0) OR
		(dbo.ORDERT.ORD_SU - ISNULL(SUM(dbo.WORKILBO.ILBO_SU), 0) > 0) ORDER
		BY dbo.ORDERT.ORD_DATE DESC, dbo.CORP.CORP_NAME, dbo.PRODUCT.PROD_NAME
	</select>

	<!-- 작업현황 조회 -->
	<select id="getWorkStatusList" parameterType="work"
		resultType="work">
		SELECT ROW_NUMBER() OVER(
		ORDER BY
		LEFT(CONVERT(nvarchar,
		WORKILBO.ILBO_STRT, 120), 10),
		WORKILBO.ILBO_GUBN,
		FACILITY.FAC_NAME,
		WORKILBO.ILBO_STRT
		) AS ROW_NUM,
		CORP.CORP_NAME,
		PRODUCT.PROD_NAME,
		PRODUCT.PROD_NO,
		PRODUCT.PROD_GYU,
		PRODUCT.PROD_JAI,
		LEFT(CONVERT(nvarchar, WORKILBO.ILBO_STRT, 120), 10) AS ILBO_DATE,
		FACILITY.FAC_NAME,
		WORKILBO.ILBO_SU,
		TECH_TE,
		ORDERT.ORD_CODE,
		ILBO_LOT
		FROM PRODUCT
		INNER JOIN CORP ON PRODUCT.CORP_CODE = CORP.CORP_CODE
		INNER JOIN TECHIN ON PRODUCT.TECH_NO = TECHIN.TECH_NO
		INNER JOIN ORDERT
		ON PRODUCT.PROD_CODE = ORDERT.PROD_CODE
		INNER JOIN WORKILBO ON
		ORDERT.ORD_CODE = WORKILBO.ORD_CODE
		LEFT OUTER JOIN FACILITY ON
		WORKILBO.FAC_CODE = FACILITY.FAC_CODE
		WHERE WORKILBO.ILBO_STRT BETWEEN
		#{sdate}  AND #{edate} 

		<!-- <if test="corp_name != null and corp_name != ''">
			AND CORP.CORP_NAME LIKE CONCAT('%', #{corp_name}, '%')
		</if>
		<if test="prod_name != null and prod_name != ''">
			AND PRODUCT.PROD_NAME LIKE CONCAT('%', #{prod_name}, '%')
		</if>
		<if test="prod_no != null and prod_no != ''">
			AND PRODUCT.PROD_NO LIKE CONCAT('%', #{prod_no}, '%')
		</if>
		<if test="tech_te != null and tech_te != ''">
			AND TECHIN.TECH_TE LIKE CONCAT('%', #{tech_te}, '%')
		</if>
		<if test="prod_gubn != null and prod_gubn != ''">
			AND PRODUCT.PROD_GUBN LIKE
			CASE
			WHEN #{prod_gubn} = '양산'
			THEN '양산'
			WHEN #{prod_gubn} = '개발' THEN '개발'
			ELSE '%'
			END
		</if> -->
	</select>

	<!-- 부적합보고서 조회 -->
	<select id="getNonReportList" parameterType="work"
		resultType="work">
		SELECT ROW_NUMBER() OVER(ORDER BY WORKERR.WERR_DATE, CORP.CORP_NAME,
		PRODUCT.PROD_NAME) AS ROW_NUM,
		LEFT(CONVERT(VARCHAR, CONVERT(datetime,
		WORKERR.WERR_WDATE, 120), 120), 10) AS WERR_WDATE,
		LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_DATE, 120), 120),
		10) AS WERR_DATE,
		dbo.CORP.CORP_NAME,
		dbo.PRODUCT.PROD_NAME,
		dbo.PRODUCT.PROD_NO,
		LEFT(CONVERT(VARCHAR, CONVERT(datetime,
		dbo.ORDERT.ORD_DATE, 120), 120), 10) AS ORD_DATE,
		dbo.FACILITY.FAC_NAME,
		dbo.WORKERR.WERR_AMNT,
		dbo.WORKERR.WERR_GUBN,
		WERR_CODE,
		CASE WORKILBO.ILBO_GUBN
		WHEN 'A' THEN '침탄'
		WHEN 'P' THEN '전세정'
		WHEN 'B' THEN '방탄'
		WHEN 'H' THEN '고주파'
		WHEN 'F' THEN '후세정'
		WHEN 'S' THEN
		'쇼트'
		WHEN 'V' THEN '진공'
		END AS ILBO_GUBN,
		WERR_FAC
		FROM dbo.WORKERR
		INNER
		JOIN dbo.WORKILBO ON dbo.WORKERR.ILBO_CODE = dbo.WORKILBO.ILBO_CODE
		AND dbo.WORKERR.ILBO_NO = dbo.WORKILBO.ILBO_NO
		INNER JOIN dbo.ORDERT ON
		dbo.WORKILBO.ORD_CODE = dbo.ORDERT.ORD_CODE
		INNER JOIN dbo.PRODUCT ON
		dbo.ORDERT.PROD_CODE = dbo.PRODUCT.PROD_CODE
		INNER JOIN dbo.CORP ON
		dbo.PRODUCT.CORP_CODE = dbo.CORP.CORP_CODE
		LEFT OUTER JOIN dbo.FACILITY
		ON dbo.WORKILBO.FAC_CODE =
		dbo.FACILITY.FAC_CODE
		WHERE WORKERR.WERR_DATE
		BETWEEN #{sdate} AND #{edate}
	</select>
	
	
	<!-- 부적합보고서 더블클릭 조회 -->
	<select id="nonReportDetail" parameterType="work" resultType="work">
		select 		
		dbo.WORKERR.WERR_AMNT,dbo.WORKERR.WERR_GUBN,WERR_CODE,WERR_JNOTE,WERR_CASE, WERR_NOTE, WERR_GNOTE,WERR_LOT,
		        WERR_AMNT,WERR_TEAM,WERR_JGUBN,WERR_USER, WERR_FNAME,
		       PRODUCT.PROD_NAME, PRODUCT.PROD_NO, PRODUCT.PROD_GYU, WERR_JNOTE, WERR_CASE, WERR_NOTE, WERR_GNOTE,  
		       LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_WDATE, 120), 120), 10) as WERR_WDATE,
		       LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_DATE, 120), 120), 10) as WERR_DATE,
               PRODUCT.PROD_JAI, CORP.CORP_NAME, TECHIN.TECH_TE, PRODUCT.PROD_PG, 
               PRODUCT.PROD_PG1, PRODUCT.PROD_PG2, 
               PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 + '~' + PRODUCT.PROD_PG2 AS ProdPG, 
               PRODUCT.PROD_SG, PRODUCT.PROD_SG1, PRODUCT.PROD_SG2, 
               PRODUCT.PROD_SG + ' ' + PRODUCT.PROD_SG1 + '~' + PRODUCT.PROD_SG2 AS ProdSG, 
               PRODUCT.PROD_GD4, PRODUCT.PROD_GD5, 
               PRODUCT.PROD_GD4 + '~' + PRODUCT.PROD_GD5 AS ProdCd,ORDERT.ORD_CODE, LEFT(CONVERT(VARCHAR, CONVERT(datetime, dbo.ORDERT.ORD_DATE, 120), 120), 10) as ORD_DATE, 
               ORDERT.ORD_LOT, WORKILBO.ILBO_CODE, WORKILBO.ILBO_NO, WERR_FAC, WERR_FNAME, WERR_INOUTGUBN
		from WORKERR 
				INNER JOIN WORKILBO ON WORKILBO.ILBO_CODE = WORKERR.ILBO_CODE and WORKILBO.ILBO_NO = WORKERR.ILBO_NO
				INNER JOIN ORDERT ON WORKILBO.ORD_CODE = ORDERT.ORD_CODE 
				INNER JOIN PRODUCT ON ORDERT.PROD_CODE = PRODUCT.PROD_CODE 
				INNER JOIN TECHIN ON PRODUCT.TECH_NO = TECHIN.TECH_NO 
				INNER JOIN CORP ON PRODUCT.CORP_CODE = CORP.CORP_CODE 
		where WERR_CODE = #{werr_code};
	
	</select>
	
	
	
	<!-- 부적합보고서 등록 insert -->
	<insert id="nonReportInsertSave" parameterType="work">
	<selectKey resultType="String" keyProperty="werr_code" order="BEFORE">
		select isnull(max(WERR_CODE), 0)+1 from workerr
	</selectKey>
	insert into WORKERR (WERR_CODE, ILBO_CODE,ILBO_NO, WERR_LOT, WERR_TEAM,
	WERR_USER, WERR_AMNT, WERR_GUBN, WERR_JGUBN, WERR_GNOTE, WERR_JNOTE,
	WERR_CASE, WERR_NOTE, WERR_DATE, WERR_WDATE, WERR_FAC, WERR_FNAME,
	WERR_INOUTGUBN)
	values (#{werr_code},#{ilbo_code},#{ilbo_no},#{werr_lot}, #{werr_team},
	#{werr_user}, #{werr_amnt}, #{werr_gubn}, #{werr_jgubn}, #{werr_gnote},
	#{werr_jnote}, #{werr_case}, #{werr_note}, #{werr_date},
	#{werr_wdate},#{werr_fac},#{werr_fname},#{werr_in_out_gubn})
	</insert>
	
	<!-- 부적합보고서 수정-->
    <update id="nonReportUpdateSave" parameterType="work">
		update WORKERR set 
			WERR_LOT = #{werr_lot}, 
			WERR_USER = #{werr_user}, 
			WERR_AMNT = #{werr_amnt}, 
			WERR_GUBN = #{werr_gubn}, 
			WERR_JGUBN = #{werr_jgubn}, 
			WERR_GNOTE = #{werr_gnote}, 
			WERR_JNOTE = #{werr_jnote}, 
			WERR_CASE = #{werr_case}, 
			WERR_NOTE = #{werr_note}, 
			WERR_DATE = #{werr_date}, 
			WERR_WDATE = #{werr_wdate},
			WERR_FAC = #{werr_fac},
			WERR_TEAM = #{werr_team},
			WERR_FNAME = #{werr_fname},
			WERR_INOUTGUBN = #{werr_in_out_gubn}
			where WERR_CODE = #{werr_code}
	</update>
	
	<delete id="nonReportDelete" parameterType="int">
    DELETE FROM WORKERR
    WHERE WERR_CODE = #{werr_code}
	</delete>
	



	<!-- 부적합등록(품질관리) -->
	<select id="getNonInsertList" parameterType="work" resultType="work">
		SELECT ROW_NUMBER()OVER(ORDER BY
		WORKERR.WERR_DATE,CORP.CORP_NAME, PRODUCT.PROD_NAME ) AS ROW_NUM ,
		LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_WDATE, 120),
		120), 10) as WERR_WDATE,
		LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_DATE, 120), 120), 10) as WERR_DATE,
		CORP.CORP_NAME,
		PRODUCT.PROD_NAME,
		PRODUCT.PROD_NO,
		LEFT(CONVERT(VARCHAR, CONVERT(datetime, ORDERT.ORD_DATE, 120), 120), 10) as ORD_DATE,
		FACILITY.FAC_NAME,
		WORKERR.WERR_AMNT,
		WORKERR.WERR_GUBN,
		WORKERR.WERR_MON,
		WORKERR.WERR_CODE,
		WORKILBO.ILBO_LOT,
		CASE WORKILBO.ILBO_GUBN
		WHEN 'A'
		THEN '침탄'
		WHEN 'P'
		THEN '전세정'
		WHEN 'B'
		THEN '방탄'
		WHEN 'H'
		THEN '고주파'
		WHEN 'F'
		THEN '후세정'
		WHEN 'S'
		THEN '쇼트'
		WHEN 'V'
		THEN '진공'
		END as ILBO_GUBN,
		WORKERR.WERR_FAC
		FROM WORKERR
		INNER JOIN WORKILBO ON WORKERR.ILBO_CODE =
		WORKILBO.ILBO_CODE AND WORKERR.ILBO_NO = WORKILBO.ILBO_NO
		INNER JOIN
		ORDERT ON WORKILBO.ORD_CODE = ORDERT.ORD_CODE INNER JOIN PRODUCT ON
		ORDERT.PROD_CODE = PRODUCT.PROD_CODE
		INNER JOIN CORP ON
		PRODUCT.CORP_CODE = CORP.CORP_CODE LEFT OUTER JOIN FACILITY ON
		WORKILBO.FAC_CODE = FACILITY.FAC_CODE
		where WERR_DATE between #{sdate} and #{edate}
	</select>
	
	
	<select id="getNonCorpList" parameterType="work" resultType="work">
		SELECT ROW_NUMBER()OVER(ORDER BY WORKERR.WERR_DATE,CORP.CORP_NAME, PRODUCT.PROD_NAME ) AS ROW_NUM ,  
			   LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_WDATE, 120), 120), 10) as WERR_WDATE,
			   LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_DATE, 120), 120), 10) as WERR_DATE,
			   CORP.CORP_NAME,
			   PRODUCT.PROD_NAME,
			   PRODUCT.PROD_NO,
			   LEFT(CONVERT(VARCHAR, CONVERT(datetime, ORDERT.ORD_DATE, 120), 120), 10)          as ORD_DATE,
			   FACILITY.FAC_NAME,
			   WORKERR.WERR_AMNT,
			   WORKERR.WERR_GUBN,
			   WORKERR.WERR_MON,
			   WORKERR.WERR_CODE,
			   WORKILBO.ILBO_LOT,
			   CASE WORKILBO.ILBO_GUBN
				   WHEN 'A'
					   THEN '침탄'
				   WHEN 'P'
					   THEN '전세정'
				   WHEN 'B'
					   THEN '방탄'
				   WHEN 'H'
					   THEN '고주파'
				   WHEN 'F'
					   THEN '후세정'
				   WHEN 'S'
					   THEN '쇼트'
				   WHEN 'V'
					   THEN '진공'
				   END                                                                           as ILBO_GUBN,
			   WORKERR.WERR_FAC
		FROM   WORKERR
		INNER JOIN  WORKILBO ON  WORKERR.ILBO_CODE =  WORKILBO.ILBO_CODE AND   WORKERR.ILBO_NO =  WORKILBO.ILBO_NO
		INNER JOIN  ORDERT ON  WORKILBO.ORD_CODE =  ORDERT.ORD_CODE INNER JOIN  PRODUCT ON  ORDERT.PROD_CODE =  PRODUCT.PROD_CODE
		INNER JOIN  CORP ON  PRODUCT.CORP_CODE =  CORP.CORP_CODE LEFT OUTER JOIN  FACILITY ON  WORKILBO.FAC_CODE =  FACILITY.FAC_CODE
		
	</select>
	
	
	<select id="nonInsertDetail" parameterType="work" resultType="work">
		SELECT ROW_NUMBER()OVER(ORDER BY WORKERR.WERR_DATE,CORP.CORP_NAME, PRODUCT.PROD_NAME ) AS ROW_NUM ,  
			LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_WDATE, 120), 120), 10) as WERR_WDATE,
			LEFT(CONVERT(VARCHAR, CONVERT(datetime, WORKERR.WERR_DATE, 120), 120), 10) as WERR_DATE,
			concat(YEAR(WORKERR.WERR_DATE) , '-' , format(MONTH(WORKERR.WERR_DATE) , '00')) as WERR_MONTH,
			CORP.CORP_NAME,  PRODUCT.PROD_NAME,  PRODUCT.PROD_NO, LEFT(CONVERT(VARCHAR, CONVERT(datetime,  ORDERT.ORD_DATE, 120), 120), 10) as ORD_DATE,
			FACILITY.FAC_NAME,  WORKERR.WERR_AMNT,  WORKERR.WERR_GUBN, WERR_CODE, WORKERR.ILBO_CODE, WORKERR.ILBO_NO,
	        WORKERR.WERR_GNOTE,  WORKERR.WERR_CASE,  WORKERR.WERR_JGUBN, WORKERR.WERR_MON,
	        WORKERR.WERR_JNOTE,  WORKERR.WERR_NOTE,  WORKERR.WERR_YU, LEFT(CONVERT(NVARCHAR,CHECK_DATEA, 120), 10) AS CHECK_DATEA, LEFT(CONVERT(NVARCHAR,CHECK_DATEB, 120), 10) AS CHECK_DATEB, 
	        LEFT(CONVERT(NVARCHAR,CHECK_DATEC, 120), 10) AS CHECK_DATEC, WERR_USER1, WERR_USER2, WERR_USER3, WERR_NOTE1, WERR_NOTE2, WERR_NOTE3, WERR_BIGO1, WERR_BIGO2, WERR_BIGO3, WERR_ALERT , WERR_FNAME,
			WERR_LOT,WERR_YU,WERR_AMNT,WERR_USER,WERR_REP,TECH_TE,WERR_INOUTGUBN,
			CASE WORKILBO.ILBO_GUBN
		           WHEN 'A' 
		           THEN '침탄' 
		           WHEN 'P' 
		           THEN '전세정' 
		           WHEN 'B' 
		           THEN '방탄' 
		           WHEN 'H' 
		           THEN '고주파' 
		           WHEN 'F' 
		           THEN '후세정' 
		           WHEN 'S' 
		           THEN '쇼트' 
		           WHEN 'V' 
		           THEN '진공' 
		       END as ILBO_GUBN,
		       WERR_FAC, 
		       WERR_BUSO
		FROM   TECHIN INNER JOIN
                FACILITY ON  TECHIN.TECH_NO =  FACILITY.TECH_NO RIGHT OUTER JOIN
                WORKERR INNER JOIN
                WORKILBO ON  WORKERR.ILBO_CODE =  WORKILBO.ILBO_CODE AND 
                WORKERR.ILBO_NO =  WORKILBO.ILBO_NO INNER JOIN
                ORDERT ON  WORKILBO.ORD_CODE =  ORDERT.ORD_CODE INNER JOIN
                PRODUCT ON  ORDERT.PROD_CODE =  PRODUCT.PROD_CODE INNER JOIN
                CORP ON  PRODUCT.CORP_CODE =  CORP.CORP_CODE ON 
                FACILITY.FAC_CODE =  WORKILBO.FAC_CODE
		WHERE WERR_CODE=#{werr_code}
	</select>
	
	<insert id="nonInsertSave" parameterType="work">
		insert into workerr (WERR_CODE,ILBO_CODE,ILBO_NO,WERR_DATE,WERR_YU,WERR_WDATE,WERR_MON,WERR_LOT,WERR_USER,WERR_REP,WERR_AMNT,WERR_GUBN,WERR_GNOTE,WERR_CASE,
		WERR_JGUBN,WERR_JNOTE,CHECK_DATEA,CHECK_DATEB,CHECK_DATEC,WERR_USER1,WERR_USER2,WERR_USER3,WERR_NOTE1,WERR_NOTE2,WERR_NOTE3,WERR_BIGO1,WERR_BIGO2,WERR_BIGO3,WERR_ALERT,WERR_FNAME
		,WERR_INOUTGUBN, WERR_BUSO) 
		
		values((select isnull(max(WERR_CODE), 0)+1 from workerr),#{ilbo_code},#{ilbo_no},#{werr_date},#{werr_yu},#{werr_wdate},#{werr_mon},#{werr_lot},#{werr_user},#{werr_rep},#{werr_amnt},
		#{werr_gubn},#{werr_gnote},#{werr_case},#{werr_jgubn},#{werr_jnote},#{check_date_a},#{check_date_b},#{check_date_c},#{werr_user1},#{werr_user2},#{werr_user3},
		#{werr_note1},#{werr_note2},#{werr_note3},#{werr_bigo1},#{werr_bigo2},#{werr_bigo3},#{werr_alert},#{werr_fname},#{werr_in_out_gubn},#{werr_buso})
	</insert>
	
	
	<update id="nonUdateSave" parameterType="work">
		update workerr set ILBO_CODE= #{ilbo_code},ILBO_NO= #{ilbo_no},WERR_DATE= #{werr_date},WERR_YU= #{werr_yu},WERR_WDATE= #{werr_wdate},WERR_MON=#{werr_mon},WERR_LOT= #{werr_lot},WERR_USER = #{werr_user},
			WERR_REP= #{werr_rep},WERR_AMNT= #{werr_amnt},WERR_GUBN= #{werr_gubn},WERR_GNOTE= #{werr_gnote},WERR_CASE= #{werr_case},WERR_JGUBN= #{werr_jgubn},WERR_JNOTE= #{werr_jnote},
			CHECK_DATEA= #{check_date_a},CHECK_DATEB= #{check_date_b},CHECK_DATEC= #{check_date_c}, WERR_USER1= #{werr_user1},  WERR_USER2= #{werrUser2}, WERR_USER3= #{werrUser3},  WERR_NOTE1= #{werr_note1},
			 WERR_NOTE2= #{werr_note2}, WERR_NOTE3= #{werr_note3}, WERR_BIGO1= #{werr_bigo1}, WERR_BIGO2= #{werr_bigo2}, WERR_BIGO3= #{werr_bigo3},WERR_ALERT= #{werr_alert}, WERR_FNAME = #{werr_fname},
			 WERR_INOUTGUBN = #{werr_in_out_gubn}, WERR_BUSO = #{werr_buso}
		where WERR_CODE = #{werr_code}
	</update>
	
	
	<delete id="deleteNon" parameterType="int">
		delete from workerr		
		where WERR_CODE = #{werr_code}
	</delete>
	
	
	
	
	
	
	




	<!-- 생산대기현황 조회 -->
	<select id="getProdWaitingStatusList" parameterType="work"
		resultType="work">
		SELECT ROW_NUMBER()OVER(ORDER BY ORD_DATE, CORP_NAME, PROD_NAME ) AS
		ROW_NUM,
		ORD_CODE, ORD_DATE, CORP_NAME, PROD_NAME, PROD_NO, PROD_GYU,
		PROD_JAI, Jan,
		LotSu,
		ITST_WP, ORD_SU, ORD_AMNT, ILBOSU, ILBOJUNG
		FROM
		vJanSetting
		WHERE (Jan > 0)
		and
		ORD_DATE BETWEEN #{sdate} AND #{edate}
		<!-- and CORP_NAME like + '%' + #{corp_name} + '%' and PROD_NAME like + 
			'%' + #{prod_name} + '%' and PROD_NO like + '%' + #{prod_no} + '%' and ORD_CODE 
			like + '%' + #{ord_code} + '%' and PROD_GYU like + '%' + #{prod_gyu} + '%' -->

	</select>



	<!-- 소입경도현황 조회 -->
	<select id="getQueHardList" parameterType="work"
		resultType="work">
		select ILBO_STRT, ILBO_END, ILBO_LOT , USER_NAME, PROD_NAME , PROD_NO,
		PROD_GYU , PROD_JAI,
		ILBO_PG1 , ILBO_PG2, ILBO_PG3, ILBO_PG4, ILBO_PG5,
		'J' + RIGHT('000000000' + CAST(dbo.WORKILBO.ILBO_PC AS nvarchar), 9)
		AS
		JuckJaeCode,
		CASE
		WHEN PROD_PG1 = '' and PROD_PG2 = ''
		THEN ''
		WHEN
		PROD_PG2 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 +' 이상'
		WHEN
		PROD_PG1 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG2 +' 이하'
		ELSE
		PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 + '~' + PRODUCT.PROD_PG2
		END
		AS PROD_PG,
		ILBO_OKNG
		from WORKILBO
		INNER JOIN ORDERT ON ORDERT.ORD_CODE =
		WORKILBO.ORD_CODE
		INNER JOIN PRODUCT ON ORDERT.PROD_CODE =
		PRODUCT.PROD_CODE
		INNER JOIN CORP ON PRODUCT.CORP_CODE = CORP.CORP_CODE
		INNER JOIN USERT ON USERT.USER_CODE = WORKILBO.USER_CODE
		WHERE
		ILBO_GUBN =
		'A'
		and WORKILBO.ILBO_STRT BETWEEN #{sdate} AND #{edate}
	</select>


	<!-- 템퍼링경도현황 조회 -->
	<select id="getTemHardList" parameterType="work"
		resultType="work">
		select ILBO_STRT, ILBO_END, ILBO_LOT , USER_NAME, PROD_NAME , PROD_NO,
		PROD_GYU , PROD_JAI,
		ILBO_PG1 , ILBO_PG2, ILBO_PG3, ILBO_PG4, ILBO_PG5,
		'J' + RIGHT('000000000' + CAST(dbo.WORKILBO.ILBO_PC AS nvarchar), 9)
		AS
		JuckJaeCode,
		CASE
		WHEN PROD_PG1 = '' and PROD_PG2 = ''
		THEN ''
		WHEN
		PROD_PG2 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 +' 이상'
		WHEN
		PROD_PG1 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG2 +' 이하'
		ELSE
		PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 + '~' + PRODUCT.PROD_PG2
		END
		AS PROD_PG,
		ILBO_OKNG
		from WORKILBO
		INNER JOIN ORDERT ON ORDERT.ORD_CODE =
		WORKILBO.ORD_CODE
		INNER JOIN PRODUCT ON ORDERT.PROD_CODE =
		PRODUCT.PROD_CODE
		INNER JOIN CORP ON PRODUCT.CORP_CODE = CORP.CORP_CODE
		INNER JOIN USERT ON USERT.USER_CODE = WORKILBO.USER_CODE
		WHERE
		ILBO_GUBN =
		'R'
		and WORKILBO.ILBO_STRT BETWEEN #{sdate} AND #{edate}
		GROUP BY ILBO_OKNG, ILBO_STRT, ILBO_END, ILBO_LOT, PROD_NAME ,
		PROD_NO, PROD_GYU , PROD_JAI, PRODUCT.PROD_PG,
		ILBO_PG1 , ILBO_PG2,
		ILBO_PG3, ILBO_PG4, ILBO_PG5, WORKILBO.ILBO_PC, PRODUCT.PROD_PG1,
		PRODUCT.PROD_PG2, USER_NAME
	</select>





	<!-- 자주검사현황 조회 -->
	<select id="getJajuStatusList" parameterType="work"
		resultType="work">
		select ILBO_STRT, ILBO_END, ILBO_LOT , USER_NAME, PROD_NAME , PROD_NO,
		PROD_GYU , PROD_JAI,
		ILBO_PG1 , ILBO_PG2, ILBO_PG3, ILBO_PG4, ILBO_PG5,
		'J' + RIGHT('000000000' + CAST(dbo.WORKILBO.ILBO_PC AS nvarchar), 9)
		AS JuckJaeCode,
		CASE
		WHEN PROD_PG1 = '' and PROD_PG2 = ''
		THEN ''
		WHEN
		PROD_PG2 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 +' 이상'
		WHEN
		PROD_PG1 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG2 +' 이하'
		ELSE
		PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 + '~' + PRODUCT.PROD_PG2
		END
		AS PROD_PG,
		ILBO_OKNG,
		CASE WHEN ILBO_GUBN = 'A'
		THEN '소입'
		WHEN ILBO_GUBN =
		'R'
		THEN '템퍼링'
		END AS ILBO_GUBN
		from WORKILBO
		INNER JOIN ORDERT ON
		ORDERT.ORD_CODE =
		WORKILBO.ORD_CODE
		INNER JOIN PRODUCT ON
		ORDERT.PROD_CODE =
		PRODUCT.PROD_CODE
		INNER JOIN CORP ON
		PRODUCT.CORP_CODE = CORP.CORP_CODE
		INNER JOIN USERT ON USERT.USER_CODE
		= WORKILBO.USER_CODE
		WHERE
		ILBO_GUBN IN ('A','R')
		and ILBO_OKNG = '불합격'
		and WORKILBO.ILBO_STRT
		BETWEEN #{sdate} AND #{edate}
	</select>


	<!-- 자주검사조치 조회 -->
	<select id="getJajuJochiList" parameterType="work"
		resultType="work">
		select ILBO_STRT, ILBO_END, ILBO_LOT , USER_NAME, PROD_NAME , PROD_NO,
		PROD_GYU , PROD_JAI,
		ILBO_PG1 , ILBO_PG2, ILBO_PG3, ILBO_PG4, ILBO_PG5,
		'J' + RIGHT('000000000' + CAST(dbo.WORKILBO.ILBO_PC AS nvarchar), 9)
		AS JuckJaeCode,
		CASE
		WHEN PROD_PG1 = '' and PROD_PG2 = ''
		THEN ''
		WHEN
		PROD_PG2 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 +' 이상'
		WHEN
		PROD_PG1 = ''
		THEN PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG2 +' 이하'
		ELSE
		PRODUCT.PROD_PG + ' ' + PRODUCT.PROD_PG1 + '~' + PRODUCT.PROD_PG2
		END
		AS PYO,
		ILBO_OKNG,
		CASE WHEN ILBO_GUBN = 'A'
		THEN '소입'
		WHEN ILBO_GUBN =
		'R'
		THEN '템퍼링'
		END AS GUBN
		from WORKILBO
		INNER JOIN ORDERT ON
		ORDERT.ORD_CODE =
		WORKILBO.ORD_CODE
		INNER JOIN PRODUCT ON
		ORDERT.PROD_CODE =
		PRODUCT.PROD_CODE
		INNER JOIN CORP ON
		PRODUCT.CORP_CODE = CORP.CORP_CODE
		INNER JOIN USERT ON USERT.USER_CODE
		= WORKILBO.USER_CODE
		WHERE
		ILBO_GUBN IN ('A','R')
		and ILBO_OKNG = '불합격'
		and WORKILBO.ILBO_STRT
		BETWEEN #{sdate} AND #{edate}
		<!-- <if test="prodName != null"> and PRODUCT.PROD_NAME like + '%' + #{prodName} 
			+ '%' </if> <if test="prodNo != null"> and PRODUCT.PROD_NO like + '%' + #{prodNo} 
			+ '%' </if> <if test="prodGyu != null"> and PRODUCT.PROD_GYU like + '%' + 
			#{prodGyu} + '%' </if> <if test="prodJai != null"> and PRODUCT.PROD_JAI like 
			+ '%' + #{prodJai} + '%' </if> -->
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
<insert id="setWorkSetSave" parameterType="work">
		INSERT 
		  INTO PLANP_D 
		       (  
		           PLNP_NO, 
		           PLNP_DATE, 
		           FAC_CODE, 
		           PLNP_SEQ, 
		           ORD_DATE, 
		           PROD_CODE,
		           PLNP_DSU, 
		           PLNP_TMP1, 
		           PLNP_TIME1, 
		           PLNP_TMP2, 
		           PLNP_TIME2, 
		           PLNP_TTMP, 
		           PLNP_TTIME, 
		           PLNP_BNO, 
		           PLNP_NOTE,
		           PLNP_STRT,
		           PLNP_END,
				   PLNP_LOT,
				   ORD_CODE
		       ) 
		       VALUES 
		       (  
		           #{plnp_no}, 
		           #{plnp_date}, 
		           #{fac_code}, 
		           #{plnp_seq}, 
		           #{ord_date}, 
		           #{prod_code},
		           #{plnp_dsu},
		           #{plnp_tmp1}, 
		           #{plnp_time1}, 
		           #{plnp_tmp2}, 
		           #{plnp_time2}, 
		           #{plnp_ttmp}, 
		           #{plnp_ttime}, 
		           #{plnp_bno}, 
		           #{plnp_note},
		           #{plnp_strt},
		           #{plnp_end},				   
				   #{plnp_lot},
				   #{ord_code}
		       )
</insert>


	<select id="getWorkPlnpSeq" parameterType="work" resultType="work">
		SELECT ISNULL(MAX(PLNP_SEQ), 0)+1 AS plnp_seq,
				CONCAT('TK-',
				   RIGHT(REPLACE(#{plnp_date},'-',''),6),
				   '-',
				   FORMAT(CAST(#{fac_code} AS INT),'00'),
				   '-',
				   FORMAT(CAST(RIGHT(ISNULL(MAX(PLNP_LOT),0),2) AS INT)+1,'00')) AS plnp_lot
		  FROM PLANP_D 
		 WHERE FAC_CODE = #{fac_code} 
		   AND PLNP_DATE = #{plnp_date}		
	</select>

	
	<select id="workInstructionReport" parameterType="work" resultType="work">
		SELECT PLANP_D.PLNP_CODE AS ilbo_code, 
		       PLANP_D.PLNP_DATE AS ilbo_strt, 
		       SUM(ORDERT.ORD_SU) AS ilbo_su, 
		       PLANP_D.PLNP_LOT AS ilbo_lot, 
		       LEFT(RIGHT(CONVERT(NVARCHAR, PLANP_D.PLNP_STRT, 120), 8), 5) AS ilbostrt, 
		       LEFT(RIGHT(CONVERT(NVARCHAR, PLANP_D.PLNP_END, 120), 8), 5) AS ilboend, 
		       LEFT(CONVERT(NVARCHAR, PLANP_D.PLNP_DATE, 120), 10) AS ilbo_date, 
		       'J' + RIGHT('000000000' + CAST(PLANP_D.PLNP_CODE AS NVARCHAR), 9) AS barcode, 
		       CORP.corp_name, 
		       ORDERT.ord_lot, 
		       ORDERT.ord_gyu, 
		       ORDERT.prod_code, 
		       TECHIN.tech_te, 
		       PRODUCT.prod_code, 
		       PRODUCT.prod_jai, 
		       PRODUCT.prod_name, 
		       PRODUCT.prod_no, 
		       PRODUCT.prod_gyu, 
		       PRODUCT.prod_danch, 
		       PRODUCT.tech_pattern, 
		       PRODUCT.prod_pg, 
		       PRODUCT.prod_pg1, 
		       PRODUCT.prod_pg2, 
		       PRODUCT.prod_gd1, 
		       PRODUCT.prod_gd2, 
		       PRODUCT.prod_gd3, 
		       PRODUCT.prod_gd4, 
		       PRODUCT.prod_gd5, 
		       PRODUCT.prod_sg, 
		       PRODUCT.prod_sg1, 
		       PRODUCT.prod_sg2, 
		       PRODUCT.prod_e1, 
		       PRODUCT.prod_e2, 
		       PRODUCT.prod_bangch, 
		       PRODUCT.prod_vnyl, 
		       PRODUCT.prod_pad, 
		       WORKSTD.wstd_n06, 
		       WORKSTD.wstd_n11, 
		       --WORKSTD.WSTD_T26, 
		       WORKSTD.wstd_t12, 
		       --WORKSTD.WSTD_T17, 
		       --WORKSTD.WSTD_T46, 
		       WORKSTD.wstd_ready, 
		       WORKSTD.wstd_worktime, 
		       WORKSTD.wstd_t32, 
		       WORKSTD.wstd_t33, 
		       WORKSTD.wstd_t34, 
		       WORKSTD.wstd_t41, 
		       WORKSTD.wstd_t42, 
		       WORKSTD.wstd_t43, 
		       WORKSTD.wstd_t44, 
		       WORKSTD.wstd_t51, 
		       WORKSTD.wstd_t52, 
		       WORKSTD.wstd_t53, 
		       WORKSTD.wstd_t54
		       --WORKSTD.WSTD_T30, 
		       --WORKSTD.WSTD_T40, 
		       --WORKSTD.WSTD_T50, 
		      -- WORKSTD.WSTD_T55, 
--		       USERT.user_name 
		  FROM PLANP_D 
		   INNER JOIN ORDERT 
		       ON PLANP_D.ORD_CODE = ORDERT.ORD_CODE 
		   INNER JOIN PRODUCT 
		       ON ORDERT.PROD_CODE = PRODUCT.PROD_CODE 
		   INNER JOIN CORP 
		       ON PRODUCT.CORP_CODE = CORP.CORP_CODE 
		   INNER JOIN TECHIN 
		       ON PRODUCT.TECH_NO = TECHIN.TECH_NO 
		   LEFT OUTER JOIN WORKSTD 
		       ON PRODUCT.PROD_CODE = WORKSTD.PROD_CODE 
--		   LEFT OUTER JOIN USERT 
--		       ON WORKILBO.USER_CODE = USERT.USER_CODE 
	WHERE 1=1
--	AND WORKILBO.ILBO_GUBN = 'J' 
	AND plnp_date BETWEEN '2025-04-01' + ' 00:00' AND '2025-04-25' + ' 23:59' 
<!--  
	       
	       AND CORP_NAME LIKE +'%'+ #{corpName} +'%' 
	       AND PROD_NAME LIKE +'%'+ #{prodName} +'%' 
	       AND PROD_NO LIKE +'%'+ #{prodNo} +'%' 
	       AND PROD_GUBN LIKE + '%' + 
	       CASE #{prodGubn} 
	           WHEN '양산' 
	           THEN '양산' 
	           WHEN '개발' 
	           THEN '개발' 
	           ELSE '' 
	       END + '%'
      
	       AND 'J' + RIGHT('000000000' + CAST(PLANP_D.PLNP_CODE AS NVARCHAR), 9) IN
		<foreach item="reportBarcode" collection="reportBarcode" open="(" separator="," close=")">
		 	#{reportBarcode}
		</foreach>	
-->	 
--	AND PLNP_LOT = 'TK-250422-02-01'
		 GROUP BY PLANP_D.PLNP_CODE, 
		       PLANP_D.PLNP_DATE, 
		       PLANP_D.PLNP_LOT, 
		       PLANP_D.PLNP_STRT, 
		       PLANP_D.PLNP_END, 
		       PLANP_D.PLNP_CODE, 
		       CORP.CORP_NAME, 
		       ORDERT.ORD_LOT, 
		       ORDERT.ORD_GYU, 
		       ORDERT.PROD_CODE, 
		       TECHIN.TECH_TE, 
		       PRODUCT.PROD_CODE, 
		       PRODUCT.PROD_JAI, 
		       PRODUCT.PROD_NAME, 
		       PRODUCT.PROD_NO, 
		       PRODUCT.PROD_GYU, 
		       PRODUCT.PROD_DANCH, 
		       PRODUCT.TECH_PATTERN, 
		       PRODUCT.PROD_PG, 
		       PRODUCT.PROD_PG1, 
		       PRODUCT.PROD_PG2, 
		       PRODUCT.PROD_GD1, 
		       PRODUCT.PROD_GD2, 
		       PRODUCT.PROD_GD3, 
		       PRODUCT.PROD_GD4, 
		       PRODUCT.PROD_GD5, 
		       PRODUCT.PROD_SG, 
		       PRODUCT.PROD_SG1, 
		       PRODUCT.PROD_SG2, 
		       PRODUCT.PROD_E1, 
		       PRODUCT.PROD_E2, 
		       PRODUCT.PROD_BANGCH, 
		       PRODUCT.PROD_VNYL, 
		       PRODUCT.PROD_PAD, 
		       WORKSTD.WSTD_N06, 
		       WORKSTD.WSTD_N11, 
		       --WORKSTD.WSTD_T26, 
		       WORKSTD.WSTD_T12, 
		       --WORKSTD.WSTD_T17, 
		       --WORKSTD.WSTD_T46, 
		       WORKSTD.WSTD_READY, 
		       WORKSTD.WSTD_WORKTIME, 
		       WORKSTD.WSTD_T32, 
		       WORKSTD.WSTD_T33, 
		       WORKSTD.WSTD_T34, 
		       WORKSTD.WSTD_T41, 
		       WORKSTD.WSTD_T42, 
		       WORKSTD.WSTD_T43, 
		       WORKSTD.WSTD_T44, 
		       WORKSTD.WSTD_T51, 
		       WORKSTD.WSTD_T52, 
		       WORKSTD.WSTD_T53, 
		       WORKSTD.WSTD_T54
		       --WORKSTD.WSTD_T30, 
		       --WORKSTD.WSTD_T40, 
		       --WORKSTD.WSTD_T50, 
		       --WORKSTD.WSTD_T55, 
--		       USERT.USER_NAME 
		ORDER BY PLANP_D.PLNP_DATE, 
		       CORP.CORP_NAME, 
		       PRODUCT.PROD_NAME  
		
	</select>
	
	
	<!-- 월별불량현황 조회 -->
	<select id="getMonthBulList" parameterType="work" resultType="work">
	with getMonthSUM as(
			select
				isnull( subString(CONVERT(VARCHAR, tn.WERR_WDATE, 120), 6,2), '') as month,
				isnull(sum(tn.WERR_AMNT), 0)                                      as WERR_AMNT_byMonth,
				isnull(tn.WERR_GUBN, '')                                          as WERR_GUBN
			from WORKERR tn
			where 1 = 1
			  and LEFT(CONVERT(VARCHAR, tn.WERR_WDATE, 120), 4) = #{sdate}
				group by WERR_GUBN, tn.WERR_WDATE
		)
		select a.WERR_GUBN
			/*, WERR_INOUTGUBN*/
			 , sum(case when a.month=1  then a.WERR_AMNT_byMonth else  0 end ) as m1
			 , sum(case when a.month=2  then a.WERR_AMNT_byMonth else  0 end ) as m2
			 , sum(case when a.month=3  then a.WERR_AMNT_byMonth else  0 end ) as m3
			 , sum(case when a.month=4  then a.WERR_AMNT_byMonth else  0 end ) as m4
			 , sum(case when a.month=5  then a.WERR_AMNT_byMonth else  0 end ) as m5
			 , sum(case when a.month=6  then a.WERR_AMNT_byMonth else  0 end ) as m6
			 , sum(case when a.month=7  then a.WERR_AMNT_byMonth else  0 end ) as m7
			 , sum(case when a.month=8  then a.WERR_AMNT_byMonth else  0 end ) as m8
			 , sum(case when a.month=9  then a.WERR_AMNT_byMonth else  0 end ) as m9
			 , sum(case when a.month=10 then a.WERR_AMNT_byMonth else  0 end ) as m10
			 , sum(case when a.month=11 then a.WERR_AMNT_byMonth else  0 end ) as m11
			 , sum(case when a.month=12 then a.WERR_AMNT_byMonth else  0 end ) as m12
			 , format(
				( ( sum( case when a.month=1   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=2   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=3   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=4   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=5   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=6   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=7   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=8   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=9   then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=10  then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=11  then a.WERR_AMNT_byMonth else  0 end ) +
					sum( case when a.month=12  then a.WERR_AMNT_byMonth else  0 end )
					  ) / 12)
			, '0.0' )  as average_SUM
		from getMonthSUM as a
		group by WERR_GUBN
		/*, WERR_INOUTGUBN*/
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</mapper>